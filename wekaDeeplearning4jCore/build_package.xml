<project name="weka-package" default="compile" basedir=".">
  <!--
    ===========================================================================
     Ant build file for a weka package

     Type ant -projecthelp for targets and descriptions.

     $Revision: 13621 $
    ===========================================================================
  -->

  <!-- set global properties for this build -->
  <property name="src" value="src/main/java"/>
  <property name="src-test" value="src/test/java"/>
  <property name="lib" value="lib" />
  <property name="data" value="datasets" />
  <property name="build" value="build"/>
  <property name="dist"  value="dist"/>
  <property name="doc"  value="doc"/>
  <property name="javac_max_memory" value="256m"/>
  <property name="debug" value="on" />
  <property name="project.revision" value="" />
  <property name="version" value="1.2.1" />
  <property name="package_cpu" value="wekaDeeplearning4jCPU-${version}-dev"/>
  <property name="package_gpu" value="wekaDeeplearning4jGPU-${version}-dev"/>
  <property name="package_cpu_linux" value="${package_cpu}-linux-x86_64"/>
  <property name="package_cpu_macosx" value="${package_cpu}-macosx-x86_64"/>
  <property name="package_cpu_windows" value="${package_cpu}-windows-x86_64"/>
  <property name="package_gpu_linux" value="${package_gpu}-linux-x86_64"/>
  <property name="package_gpu_macosx" value="${package_gpu}-macosx-x86_64"/>
  <property name="package_gpu_windows" value="${package_gpu}-windows-x86_64"/>

  <target name="init_all">
    <!-- Create the time stamp -->
    <tstamp/>
  </target>

  <!-- general classpath definition, incl. CLASSPATH env. variable,
  // but jars in lib directory have precedence over the CLASSPATH variable -->
  <path id="project.class.path">
    <fileset dir="${lib}">
      <include name="*.jar"/>
      <include name="*.zip"/>
    </fileset>
    <pathelement location="${build}/classes"/>
    <pathelement location="${build}/testcases"/>
    <pathelement path="${java.class.path}" />
  </path>

  <!--
   ============================================================================
   Compilation and documentation making stuff
   ============================================================================
  -->

  <target name="init_compile" depends="init_all">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/classes"/>
  </target>

  <!-- Compile the java code from ${src}/weka into ${build}/classes -->
  <!-- resolve was previously in depends -->
  <target name="compile" depends="init_compile"
          description="Compile package and deposit class files in build/classes">
    <javac srcdir="${src}"
           fork="yes" memoryMaximumSize="${javac_max_memory}"
           destdir="${build}/classes"
           optimize="${optimization}"
           debug="${debug}"
           deprecation="${deprecation}"
           source="1.8" target="1.8">

      <classpath refid="project.class.path" />
    </javac>
    <copy todir="${build}/classes" >
      <fileset dir="${src}">
        <include name="**/*.gif"/>
        <include name="**/*.png"/>
        <include name="**/*.jpeg"/>
        <include name="**/*.jpg"/>
        <include name="**/*.props"/>
        <include name="**/*.txt"/>
        <include name="**/*.xml"/>
        <include name="**/*.cup"/>
        <include name="**/*.flex"/>
        <include name="**/*.jflex"/>
        <include name="**/*.properties"/>
        <include name="**/*.default"/>
      </fileset>
    </copy>
  </target>

  <!-- Make the javadocs -->
  <target name="docs"
          depends="init_all"
          description="Make javadocs into ./doc">
    <mkdir dir="${doc}"/>
    <javadoc sourcepath="${src}"
             classpathref="project.class.path"
             destdir="${doc}"
             Author="yes"
             Public="yes"
             link="http://weka.sourceforge.net/doc.dev/"
             maxmemory="256m"/>
  </target>


  <!--
    ===========================================================================
    Unit testing stuff
    ===========================================================================
  -->
  <!-- Junit testing initialization -->
  <target name="init_tests" depends="init_all">
    <available property="junit.present" classname="junit.framework.TestCase"/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}/testcases"/>
    <!-- make this if it doesn't exist so that the compile_test task doesn't faile for
         stuff that doesn't have test cases -->
    <mkdir dir="${src-test}"/>
  </target>

  <!-- compile the testcases -->
  <target name="compile_tests" depends="init_tests, compile"
          description="Compile unit tests into build/testcases">
    <javac srcdir="${src-test}"
           fork="yes" memoryMaximumSize="${javac_max_memory}"
           destdir="${build}/testcases"
           optimize="${optimization}"
           debug="${debug}"
           deprecation="${deprecation}"
           source="1.6" target="1.6">
      <classpath refid="project.class.path" />
    </javac>
    <copy todir="${build}/testcases" >
      <fileset dir="${src-test}">
        <include name="**/*.arff"/>
        <include name="**/*.cost"/>
        <include name="**/*.xml"/>
        <include name="**/*.matrix"/>
      </fileset>
    </copy>
  </target>

  <!--
    ===========================================================================
    Release making stuff
    ===========================================================================
  -->

  <target name = "init_dist" depends="init_all">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>
  </target>

  <!-- Put everything in ${build}/classes into the ${package}.jar file -->
  <target name="exejar" depends="compile, docs, init_dist"
          description="Create a binary jar file in ./dist">
    <jar jarfile="${dist}/${package}.jar"
         basedir="${build}/classes">
    </jar>
  </target>

  <target name="prepare_package">
    <antcall target="exejar">
      <param name="package" value="${package}"/>
    </antcall>
    <mkdir dir="${dist}/${package}"/>
    <copydir src="${data}" dest="${dist}/${package}/${data}"/>
    <copy todir="${dist}/${package}">
      <fileset dir="${dist}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <delete>
      <fileset dir="${dist}">
        <include name="*.jar"/>
      </fileset>
    </delete>
    <copy file="Description_${backend}.props"
          tofile="${dist}/${package}/Description.props"/>
    <copy file="GenericPropertiesCreator.props"
          todir="${dist}/${package}"/>
    <copy file="GUIEditors.props"
          todir="${dist}/${package}"/>
    <mkdir dir="${dist}/${package}/lib"/>
    <antcall target="copy_libs_Core">
      <param name="package" value="${package}"/>
    </antcall>
  </target>

  <!--Copy CPU specific libs-->
  <target name="copy_libs_CPU">
    <copy todir="${dist}/${package}/lib" >
      <fileset dir="${lib}">
        <include name="nd4j-native-0*.jar"/>
        <include name="openblas*.jar"/>
      </fileset>
    </copy>
  </target>

  <!--Copy GPU specific libs-->
  <target name="copy_libs_GPU">
    <copy todir="${dist}/${package}/lib" >
      <fileset dir="${lib}">
        <include name="cuda*.jar"/>
        <include name="nd4j-cuda*.jar"/>
      </fileset>
    </copy>
  </target>


  <!--Copy Core libs-->
  <target name="copy_libs_Core">
    <copy todir="${dist}/${package}/lib" >
      <fileset dir="${lib}">
        <!--Includes-->
        <include name="deeplearning*.jar"/>
        <include name="common*.jar"/>
        <include name="datavec*.jar"/>
        <include name="guava*.jar"/>
        <include name="imageio*.jar"/>
        <include name="jackson*.jar"/>
        <include name="jai-imageio*.jar"/>
        <include name="javassist*.jar"/>
        <include name="lombok*.jar"/>
        <include name="nd4j-api-*.jar"/>
        <include name="nd4j-base64*.jar"/>
        <include name="nd4j-buffer*.jar"/>
        <include name="nd4j-common*.jar"/>
        <include name="nd4j-context*.jar"/>
        <include name="nd4j-jackson*.jar"/>
        <include name="nd4j-native-api*.jar"/>
        <include name="reflections*.jar"/>
        <include name="slf4j*.jar"/>
        <include name="ark-tweet-nlp*.jar" />
        <include name="commons-lang-*.jar" />
        <include name="javacpp*.jar"/>
        <include name="javacv*.jar"/>
        <include name="opencv*.jar"/>

        <!--Excludes-->
        <exclude name="deeplearning4j-nn-*.jar"/>
        <exclude name="deeplearning4j-nlp-*.jar"/>
        <exclude name="nd4j-api-*.jar"/>
        <exclude name="nd4j-base64*.jar"/>
        <exclude name="nd4j-buffer*.jar"/>
        <exclude name="nd4j-common*.jar"/>
        <exclude name="nd4j-context*.jar"/>
        <exclude name="nd4j-jackson*.jar"/>
        <exclude name="nd4j-native-api*.jar"/>
        <exclude name="slf4j-api-*.jar"/>
      </fileset>
    </copy>

    <!--Libraries that need to be copied to the package root dir for some reason-->
    <copy todir="${dist}/${package}" >
      <fileset dir="${lib}">
        <include name="deeplearning4j-nn-*.jar"/>
        <include name="deeplearning4j-nlp-*.jar"/>
        <include name="nd4j-api-*.jar"/>
        <include name="nd4j-base64*.jar"/>
        <include name="nd4j-buffer*.jar"/>
        <include name="nd4j-common*.jar"/>
        <include name="nd4j-context*.jar"/>
        <include name="nd4j-jackson*.jar"/>
        <include name="nd4j-native-api*.jar"/>
        <include name="slf4j-api-*.jar"/>
      </fileset>
    </copy>
  </target>


  <target name="finish_package">
    <mkdir dir="${dist}/${package}/doc"/>
    <copy todir="${dist}/${package}/doc" >
      <fileset dir="${doc}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <mkdir dir="${dist}/${package}/src"/>
    <copy todir="${dist}/${package}" >
      <fileset dir=".">
        <include name="*.xml"/>
        <include name="*.properties"/>
        <include name="src/**/*.excludes"/>
        <include name="src/**/*.gif"/>
        <include name="src/**/*.java"/>
        <include name="src/**/*.jpeg"/>
        <include name="src/**/*.jpg"/>
        <include name="src/**/*.props"/>
        <include name="src/**/*.txt"/>
        <include name="src/**/*.xml"/>
        <include name="src/**/*.cup"/>
        <include name="src/**/*.flex"/>
        <include name="src/**/*.jflex"/>
        <include name="src/**/*.properties"/>
        <include name="src/**/*.default"/>
        <include name="src/**/*.cost"/>
        <include name="src/**/*.arff"/>
        <include name="src/**/*.matrix"/>
      </fileset>
    </copy>

    <!--Build different packages for different platforms-->
    <copydir src="${dist}/${package}" dest="${dist}/${package-linux}"/>
    <copydir src="${dist}/${package}" dest="${dist}/${package-macosx}"/>
    <copydir src="${dist}/${package}" dest="${dist}/${package-windows}"/>


    <!--Replace PLATFORM in Description.props with appropriate platform-->
    <exec executable="/bin/bash">
      <arg value="-c"/>
      <arg value="sed -i 's/{PLATFORM}/linux/g' ${dist}/${package-linux}/Description.props;
                  sed -i 's/{PLATFORM}/macosx/g' ${dist}/${package-macosx}/Description.props;
                  sed -i 's/{PLATFORM}/windows/g' ${dist}/${package-windows}/Description.props "/>
    </exec>

    <!--Replace VERSION in Description.props with current version-->
    <exec executable="/bin/bash">
      <arg value="-c"/>
      <arg value="sed -i 's/{VERSION}/${version}/g' ${dist}/${package-linux}/Description.props;
                  sed -i 's/{VERSION}/${version}/g' ${dist}/${package-macosx}/Description.props;
                  sed -i 's/{VERSION}/${version}/g' ${dist}/${package-windows}/Description.props "/>
    </exec>


    <!--Remove wrong libraries from platform packages-->
    <!--Keep linux-x86_64 libs-->
    <delete>
      <fileset dir="${dist}/${package-linux}/lib">
        <include name="*linux*.jar"/>
        <include name="*windows*.jar"/>
        <include name="*macosx*.jar"/>
        <include name="*android*.jar"/>
        <exclude name="*linux-x86_64.jar"/>
      </fileset>
    </delete>

    <!--Keep macosx-x86_64 libs-->
    <delete>
      <fileset dir="${dist}/${package-macosx}/lib">
        <include name="*linux*.jar"/>
        <include name="*windows*.jar"/>
        <include name="*macosx*.jar"/>
        <include name="*android*.jar"/>
        <exclude name="*macosx-x86_64.jar"/>
      </fileset>
    </delete>

    <!--Keep windows-x86_64 libs-->
    <delete>
      <fileset dir="${dist}/${package-windows}/lib">
        <include name="*linux*.jar"/>
        <include name="*windows*.jar"/>
        <include name="*macosx*.jar"/>
        <include name="*android*.jar"/>
        <exclude name="*windows-x86_64.jar"/>
      </fileset>
    </delete>

    <zip destfile="${dist}/${package-linux}.zip" basedir="${dist}/${package-linux}"/>
    <zip destfile="${dist}/${package-macosx}.zip" basedir="${dist}/${package-macosx}"/>
    <zip destfile="${dist}/${package-windows}.zip" basedir="${dist}/${package-windows}"/>
    <copy file="${dist}/${package}/${package}.jar" todir="${dist}"/>
  </target>

  <!-- Put all .java, and .props files into ${dist}/${package}-src.jar-->
  <target name="srcjar" depends="init_dist, init_all"
          description="Create a jar file containing weka source in ./dist. Run with -Dpackage=[package name]">
    <!-- jar up the source -->
    <jar jarfile="${dist}/${package}-src.jar"
         basedir=".">
      <include name="*.xml"/>
      <include name="src/**/*.excludes"/>
      <include name="src/**/*.gif"/>
      <include name="src/**/*.java"/>
      <include name="src/**/*.jpeg"/>
      <include name="src/**/*.jpg"/>
      <include name="src/**/*.props"/>
      <include name="src/**/*.txt"/>
      <include name="src/**/*.xml"/>
      <include name="src/**/*.cup"/>
      <include name="src/**/*.flex"/>
      <include name="src/**/*.jflex"/>
      <include name="src/**/*.properties"/>
      <include name="src/**/*.default"/>
      <include name="src/**/*.cost"/>
      <include name="src/**/*.arff"/>
      <include name="src/**/*.matrix"/>
      <include name="lib/**/*.jar"/>
    </jar>
  </target>

  <!--Remove non os files-->
  <target name="delete_non_os_files">
    <exec executable="/bin/bash">
      <arg value="-c"/>
      <arg value="echo 'Cleaning up' ${package}"/>
    </exec>
    <delete dir="${dist}/${package}"/>
    <delete file="${dist}/${package}.jar"/>
  </target>

  <!-- Clean -->
  <target name="clean" depends="init_all"
          description="Removes the build, dist and reports directories">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${doc}"/>
  </target>

  <!--Main target to build zip files for CPU and all platforms (linux, macosx, windows)-->
  <target name="make_package_CPU">
    <!--Prepare package and copy core libs-->
    <antcall target="prepare_package">
      <param name="backend" value="CPU"/>
      <param name="package" value="${package_cpu}"/>
    </antcall>

    <!--Copy CPU specific libs-->
    <antcall target="copy_libs_CPU">
      <param name="package" value="${package_cpu}"/>
    </antcall>

    <!--Create package-->
    <antcall target="finish_package">
      <param name="backend" value="${backend}"/>
      <param name="package" value="${package_cpu}"/>
      <param name="package-linux" value="${package_cpu_linux}"/>
      <param name="package-macosx" value="${package_cpu_macosx}"/>
      <param name="package-windows" value="${package_cpu_windows}"/>
    </antcall>

    <!--Clean up non os files-->
    <antcall target="delete_non_os_files">
      <param name="package" value="${package_cpu}"/>
    </antcall>
  </target>


  <!--Main target to build zip files for GPU and all platforms (linux, macosx, windows)-->
  <target name="make_package_GPU">
    <!--Prepare package and copy core libs-->
    <antcall target="prepare_package">
      <param name="backend" value="GPU"/>
      <param name="package" value="${package_gpu}"/>
    </antcall>

    <!--Copy GPU specific libs-->
    <antcall target="copy_libs_GPU">
      <param name="package" value="${package_gpu}"/>
    </antcall>

    <!--Create package-->
    <antcall target="finish_package">
      <param name="backend" value="${backend}"/>
      <param name="package" value="${package_gpu}"/>
      <param name="package-linux" value="${package_gpu_linux}"/>
      <param name="package-macosx" value="${package_gpu_macosx}"/>
      <param name="package-windows" value="${package_gpu_windows}"/>
    </antcall>

    <!--Clean up non os files-->
    <antcall target="delete_non_os_files">
      <param name="package" value="${package_gpu}"/>
    </antcall>
  </target>

</project>

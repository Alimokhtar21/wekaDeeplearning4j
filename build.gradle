plugins {
    id 'java-library'
}

group 'nz.ac.waikato.cms.weka'
version new File('version').text.replace("\n","")
description 'Deep learning for WEKA'
sourceCompatibility 1.8

// Dependency versions
ext.versions = [
        'nd4j': '1.0.0-beta',
        'dl4j': '1.0.0-beta',
        'weka': '3.8.1',
        'junit': '4.12',
        'log4j':'2.9.1',
        'ark_tweet_nlp' : '0.3.2',
        'commons_lang' : '2.6',
        'openblas' : '0.2.19-1.3',
        'inetutils4j' : '0.0.2',
        'reflections' : '0.9.10'
]

// Copy all compiletime dependencies into 'lib'
task copyDependencies(type: Copy) {
    from configurations.compileClasspath
    into 'lib'
}


dependencies {
    implementation "nz.ac.waikato.cms.weka:weka-stable:$versions.weka"
    implementation "org.deeplearning4j:deeplearning4j-core:$versions.dl4j"
    implementation "org.deeplearning4j:deeplearning4j-nlp:$versions.dl4j"
    implementation "org.deeplearning4j:deeplearning4j-zoo:$versions.dl4j"
    implementation "org.nd4j:nd4j-jackson:$versions.nd4j"
    implementation "org.nd4j:nd4j-native-platform:$versions.nd4j"
    implementation "org.nd4j:nd4j-native-api:$versions.nd4j"
    implementation "org.bytedeco.javacpp-presets:openblas-platform:$versions.openblas"

    implementation "org.apache.logging.log4j:log4j-api:$versions.log4j"
    implementation "org.apache.logging.log4j:log4j-core:$versions.log4j"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$versions.log4j"
    implementation "edu.cmu.cs:ark-tweet-nlp:$versions.ark_tweet_nlp"
    implementation "commons-lang:commons-lang:$versions.commons_lang"
    implementation "org.reflections:reflections:$versions.reflections"

    testImplementation group: "nz.ac.waikato.cms.weka", name: "weka-stable", version: "$versions.weka", classifier: "tests"
    testImplementation "com.github.fracpete:inetutils4j:$versions.inetutils4j"
    testImplementation "junit:junit:$versions.junit"


    def cuda_version = System.properties['cuda']
    if(cuda_version != null){
        def valid_cuda_versions = ['8.0', '9.0', '9.1']
        if(cuda_version in valid_cuda_versions){
            implementation "org.nd4j:nd4j-cuda-$cuda_version-platform:$versions.nd4j"
            implementation "org.deeplearning4j:deeplearning4j-cuda-$cuda_version:$versions.dl4j"
        } else {
            throw new GradleException("Invalid CUDA Version: $cuda_version - Must be one of $valid_cuda_versions")
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
}
